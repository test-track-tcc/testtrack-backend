trigger:
  branches:
    include:
      - main
      - develop
      - release

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'testtrack-connection'
  dockerRegistryServiceConnection: 'testtrack-docker'
  dockerHubUsername: 'diogobonet'
  dockerRepoName: 'testtrack-backend'
  imageName: '$(dockerHubUsername)/$(dockerRepoName)'
  webAppName: 'testtrack'
  resourceGroup: 'testtrack'
  dbServerName: 'testtrackdev.mysql.database.azure.com'
  dbName: 'testtrackdev'
  dbAdminUser: 'nestappadmin'
  dbAdminPassword: 'PUC@1234'

stages:
  - stage: BuildAndPushImage
    displayName: 'Build & Push Docker Image'
    jobs:
      - job: BuildDockerImage
        displayName: 'Construir e Enviar Imagem Docker'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              branch_name=$(Build.SourceBranchName)
              if [[ "$branch_name" == "main" || "$branch_name" == "develop" ]]; then
                echo "##vso[task.setvariable variable=imageTag]$branch_name"
              elif [[ "$branch_name" == "release"* ]]; then
                echo "##vso[task.setvariable variable=imageTag]$(echo $branch_name | sed 's/\//-/g')"
              else
                echo "##vso[task.setvariable variable=imageTag]latest"
              fi
            displayName: 'Definir Tag da Imagem Docker'
            name: setImageTag

          - task: Docker@2
            displayName: 'Construir Imagem Docker (Sem Push por enquanto)'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageName)'
              command: 'build'
              Dockerfile: 'Dockerfile'
              tags: 'latest'

  - stage: RunTests
    displayName: 'Run Unit and E2E Tests'
    dependsOn: BuildAndPushImage
    jobs:
      - job: RunJestTests
        displayName: 'Run Jest Unit and E2E Tests'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '22.x'
            displayName: 'Install Node.js'

          - script: |
              npm install
            displayName: 'Install Dependencies'

          # Run Unit Tests
          - script: |
              npx jest src/app.controller.spec.ts --coverage --reporters=default --reporters=jest-junit
            displayName: 'Run Unit Tests with Coverage and JUnit Report'
            env:
              JEST_JUNIT_OUTPUT_DIR: 'test-results/unit'
              JEST_JUNIT_OUTPUT_NAME: 'junit.xml'

          - script: |
              npx jest --config ./test/jest-e2e.json --reporters=default --reporters=jest-junit
            displayName: 'Run E2E Tests with JUnit Report'
            env:
              JEST_JUNIT_OUTPUT_DIR: 'test-results/e2e'
              JEST_JUNIT_OUTPUT_NAME: 'junit.xml'

          - task: PublishTestResults@2
            displayName: 'Publish Unit Test Results'
            inputs:
              testResultsFiles: 'test-results/unit/junit.xml'
              testRunTitle: 'Unit Tests'

          - task: PublishTestResults@2
            displayName: 'Publish E2E Test Results'
            inputs:
              testResultsFiles: 'test-results/e2e/junit.xml'
              testRunTitle: 'E2E Tests'

          # Publicar Code Coverage
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'coverage/cobertura-coverage.xml'
              reportDirectory: 'coverage'

  - stage: Deploy
    displayName: 'Deploy para Ambiente Compartilhado'
    dependsOn: RunTests
    condition: succeeded('RunTests')
    variables:
      imageTagForDeploy: $[ stageDependencies.BuildAndPushImage.BuildDockerImage.outputs['setImageTag.imageTag'] ]
    jobs:
      - deployment: DeploySharedEnv
        displayName: 'Deploy para o Ambiente Compartilhado'
        environment: 'Shared-Environment'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deploy-container-template.yml
                  parameters:
                    webAppName: $(webAppName)
                    resourceGroup: $(resourceGroup)
                    azureServiceConnection: $(azureServiceConnection)
                    dbServerName: $(dbServerName)
                    dbName: $(dbName)
                    dbAdminUser: $(dbAdminUser)
                    dbAdminPassword: $(dbAdminPassword)
                    imageNameWithTag: '$(imageName):latest'
